name: Deploy to Google Cloud Run

on:
#   push:
#     branches:
#       - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: europe-west1
  BACKEND_SERVICE: solarmatch-backend
  FRONTEND_SERVICE: solarmatch-frontend

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and push backend image
        working-directory: ./backend
        run: |
          IMAGE="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/solarmatch/${{ env.BACKEND_SERVICE }}:${{ github.sha }}"
          IMAGE_LATEST="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/solarmatch/${{ env.BACKEND_SERVICE }}:latest"
          
          docker build -t $IMAGE -t $IMAGE_LATEST .
          docker push $IMAGE
          docker push $IMAGE_LATEST
      
      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/solarmatch/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --set-env-vars "HOST=0.0.0.0,PORT=8000,DEBUG=False" \
            --set-secrets "GOOGLE_SOLAR_API_KEY=google-solar-api-key:latest,DATABASE_URL=database-url:latest"
      
      - name: Get backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
    
    outputs:
      backend_url: ${{ steps.backend-url.outputs.url }}
  
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and push frontend image
        run: |
          IMAGE="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/solarmatch/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}"
          IMAGE_LATEST="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/solarmatch/${{ env.FRONTEND_SERVICE }}:latest"
          
          docker build -t $IMAGE -t $IMAGE_LATEST \
            --build-arg NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend_url }} .
          docker push $IMAGE
          docker push $IMAGE_LATEST
      
      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/solarmatch/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 60 \
            --set-env-vars "NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend_url }}" \
            --set-secrets "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=google-maps-api-key:latest"
      
      - name: Get frontend URL
        id: frontend-url
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "### ðŸš€ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend:** $FRONTEND_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Backend:** ${{ needs.deploy-backend.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
